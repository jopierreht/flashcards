{"ast":null,"code":"var _jsxFileName = \"/Users/josuepierre/Documents/Briye/Agency/Dev/Projects/js/React/flashcards/src/components/NewQuizForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ROUTES from \"../app/routes\";\n// Importing actions and selectors from Redux slices\nimport { addQuizToTopic, selectTopics } from \"../features/topics/topicsSlice\";\nimport { addQuiz } from \"../features/quizzes/quizzesSlice\";\nimport { addCard } from \"../features/cards/cardsSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewQuizForm() {\n  _s();\n  // State variables for quiz name, cards, and selected topic\n  const [name, setName] = useState(\"\");\n  const [cards, setCards] = useState([]);\n  const [topicId, setTopicId] = useState(\"\");\n\n  // React Router's navigation hook\n  const navigate = useNavigate();\n\n  // Accessing topics from Redux store\n  const topics = useSelector(selectTopics);\n\n  // Redux dispatch function\n  const dispatch = useDispatch();\n\n  // Handles form submission to create a new quiz\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Prevent submission if quiz name is empty\n    if (name.length === 0) {\n      return;\n    }\n    const cardIds = [];\n\n    // Create new cards and dispatch them to the Redux store\n    cards.forEach(card => {\n      const cardId = uuidv4(); // Generate unique ID for each card\n      dispatch(addCard({\n        id: cardId,\n        front: card.front,\n        back: card.back\n      }));\n      cardIds.push(cardId); // Collect card IDs for the quiz\n    });\n\n    // Create a new quiz object\n    const quizId = uuidv4(); // Generate unique ID for the quiz\n\n    // Dispatch the new quiz to the Redux store\n    dispatch(addQuiz({\n      id: quizId,\n      name: name,\n      topicId: topicId,\n      cardIds: cardIds\n    }));\n\n    // Dispatch action to associate the quiz with the selected topic\n    dispatch(addQuizToTopic({\n      topicId,\n      quizId\n    }));\n\n    // Navigate to the quizzes route after creation\n    navigate(ROUTES.quizzesRoute());\n  };\n\n  // Adds a new card input field to the form\n  const addCardInputs = e => {\n    e.preventDefault();\n    setCards(cards.concat({\n      front: \"\",\n      back: \"\"\n    })); // Add an empty card object\n  };\n\n  // Removes a card input field from the form\n  const removeCard = (e, index) => {\n    e.preventDefault();\n    setCards(cards.filter((card, i) => index !== i)); // Remove card at the specified index\n  };\n\n  // Updates the state of a specific card's front or back text\n  const updateCardState = (index, side, value) => {\n    const newCards = cards.slice(); // Create a shallow copy of the cards array\n    newCards[index][side] = value; // Update the specified side (front/back) of the card\n    setCards(newCards); // Update the state with the modified cards array\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create a new quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"quiz-name\",\n        value: name,\n        onChange: e => setName(e.currentTarget.value),\n        placeholder: \"Quiz Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"quiz-topic\",\n        onChange: e => setTopicId(e.currentTarget.value),\n        placeholder: \"Topic\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Topic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), Object.values(topics).map(topic => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: topic.id,\n          children: topic.name\n        }, topic.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-front-back\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: `card-front-${index}`,\n          value: cards[index].front,\n          onChange: e => updateCardState(index, \"front\", e.currentTarget.value),\n          placeholder: \"Front\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: `card-back-${index}`,\n          value: cards[index].back,\n          onChange: e => updateCardState(index, \"back\", e.currentTarget.value),\n          placeholder: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => removeCard(e, index),\n          className: \"remove-card-button\",\n          children: \"Remove Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addCardInputs,\n          children: \"Add a Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(NewQuizForm, \"m0vMFlwVka2q8yLxoiY9z9znCaU=\", false, function () {\n  return [useNavigate, useSelector, useDispatch];\n});\n_c = NewQuizForm;\nvar _c;\n$RefreshReg$(_c, \"NewQuizForm\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","useNavigate","v4","uuidv4","ROUTES","addQuizToTopic","selectTopics","addQuiz","addCard","jsxDEV","_jsxDEV","NewQuizForm","_s","name","setName","cards","setCards","topicId","setTopicId","navigate","topics","dispatch","handleSubmit","e","preventDefault","length","cardIds","forEach","card","cardId","id","front","back","push","quizId","quizzesRoute","addCardInputs","concat","removeCard","index","filter","i","updateCardState","side","value","newCards","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","currentTarget","placeholder","Object","values","map","topic","className","onClick","type","_c","$RefreshReg$"],"sources":["/Users/josuepierre/Documents/Briye/Agency/Dev/Projects/js/React/flashcards/src/components/NewQuizForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ROUTES from \"../app/routes\";\n// Importing actions and selectors from Redux slices\nimport { addQuizToTopic, selectTopics } from \"../features/topics/topicsSlice\";\nimport { addQuiz } from \"../features/quizzes/quizzesSlice\";\nimport { addCard } from \"../features/cards/cardsSlice\";\n\nexport default function NewQuizForm() {\n  // State variables for quiz name, cards, and selected topic\n  const [name, setName] = useState(\"\");\n  const [cards, setCards] = useState([]);\n  const [topicId, setTopicId] = useState(\"\");\n\n  // React Router's navigation hook\n  const navigate = useNavigate();\n\n  // Accessing topics from Redux store\n  const topics = useSelector(selectTopics);\n\n  // Redux dispatch function\n  const dispatch = useDispatch();\n\n  // Handles form submission to create a new quiz\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Prevent submission if quiz name is empty\n    if (name.length === 0) {\n      return;\n    }\n\n    const cardIds = [];\n\n    // Create new cards and dispatch them to the Redux store\n    cards.forEach((card) => {\n      const cardId = uuidv4(); // Generate unique ID for each card\n      dispatch(\n        addCard({ \n          id: cardId, \n          front: card.front, \n          back: card.back \n        })\n      );\n      cardIds.push(cardId); // Collect card IDs for the quiz\n    });\n\n    // Create a new quiz object\n    const quizId = uuidv4(); // Generate unique ID for the quiz\n\n    // Dispatch the new quiz to the Redux store\n    dispatch(\n      addQuiz({\n        id: quizId,\n        name: name,\n        topicId: topicId,\n        cardIds: cardIds,\n      })\n    );\n\n    // Dispatch action to associate the quiz with the selected topic\n    dispatch(addQuizToTopic({ topicId, quizId }));\n\n    // Navigate to the quizzes route after creation\n    navigate(ROUTES.quizzesRoute());\n  };\n\n  // Adds a new card input field to the form\n  const addCardInputs = (e) => {\n    e.preventDefault();\n    setCards(cards.concat({ front: \"\", back: \"\" })); // Add an empty card object\n  };\n\n  // Removes a card input field from the form\n  const removeCard = (e, index) => {\n    e.preventDefault();\n    setCards(cards.filter((card, i) => index !== i)); // Remove card at the specified index\n  };\n\n  // Updates the state of a specific card's front or back text\n  const updateCardState = (index, side, value) => {\n    const newCards = cards.slice(); // Create a shallow copy of the cards array\n    newCards[index][side] = value; // Update the specified side (front/back) of the card\n    setCards(newCards); // Update the state with the modified cards array\n  };\n\n  return (\n    <section>\n      <h1>Create a new quiz</h1>\n      <form onSubmit={handleSubmit}>\n        {/* Input for quiz name */}\n        <input\n          id=\"quiz-name\"\n          value={name}\n          onChange={(e) => setName(e.currentTarget.value)}\n          placeholder=\"Quiz Title\"\n        />\n\n        {/* Dropdown to select a topic */}\n        <select\n          id=\"quiz-topic\"\n          onChange={(e) => setTopicId(e.currentTarget.value)}\n          placeholder=\"Topic\"\n        >\n          <option value=\"\">Topic</option>\n          {Object.values(topics).map((topic) => (\n            <option key={topic.id} value={topic.id}>\n              {topic.name}\n            </option>\n          ))}\n        </select>\n\n        {/* Render card input fields */}\n        {cards.map((card, index) => (\n          <div key={index} className=\"card-front-back\">\n            {/* Input for card front text */}\n            <input\n              id={`card-front-${index}`}\n              value={cards[index].front}\n              onChange={(e) =>\n                updateCardState(index, \"front\", e.currentTarget.value)\n              }\n              placeholder=\"Front\"\n            />\n\n            {/* Input for card back text */}\n            <input\n              id={`card-back-${index}`}\n              value={cards[index].back}\n              onChange={(e) =>\n                updateCardState(index, \"back\", e.currentTarget.value)\n              }\n              placeholder=\"Back\"\n            />\n\n            {/* Button to remove the card */}\n            <button\n              onClick={(e) => removeCard(e, index)}\n              className=\"remove-card-button\"\n            >\n              Remove Card\n            </button>\n          </div>\n        ))}\n\n        {/* Buttons to add a card or submit the form */}\n        <div className=\"actions-container\">\n          <button onClick={addCardInputs}>Add a Card</button>\n          <button type=\"submit\">Create Quiz</button>\n        </div>\n      </form>\n    </section>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}